testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = FALSE)
modelo_trials_2 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:15]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50_2)
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:13]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50_2)
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:12]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50_2)
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:11]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50_2)
modelo_trials_2 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50_2)
modelo_clasificacion_C50_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
modelo_clasificacion_rpart_2 <- rpart(formula = trainy2 ~ ., data = trainx2, method = "class" )
rpart.plot(modelo_clasificacion_rpart_2, type=2,extra = 8, under = TRUE, faclen=5,cex=.85)
heart <- read.csv("../data/heart_in.csv",sep=",")
str(heart)
summary(heart)
heart$Age <- as.numeric(heart$Age)
heart$Sex <- as.factor(heart$Sex)
heart$ChestPainType <- as.factor(heart$ChestPainType)
heart$RestingBP <- as.numeric(heart$RestingBP)
heart$Cholesterol <- as.numeric(heart$Cholesterol)
heart$FastingBS <- as.numeric(heart$FastingBS)
heart$RestingECG  <- as.factor(heart$RestingECG)
heart$MaxHR <- as.numeric(heart$MaxHR)
heart$ExerciseAngina <- as.factor(heart$ExerciseAngina)
heart$ST_Slope <- as.factor(heart$ST_Slope)
heart$HeartDisease <- as.numeric(heart$HeartDisease)
boxplot(heart$Age,main="Edad del paciente")
boxplot.stats(heart$Age)$out
boxplot(heart$RestingBP,main="Presión arterial en reposo")
boxplot.stats(heart$RestingBP)$out
boxplot(heart$Cholesterol,main="Colesterol")
boxplot.stats(heart$Cholesterol)$out
boxplot(heart$MaxHR,main="Frecuencia cardíaca máxima alcanzada")
boxplot.stats(heart$MaxHR)$out
posMaxHR <- which(heart$MaxHR==60 | heart$MaxHR==63)
heart$MaxHR[posMaxHR] <- NA
library(VIM)
MaxHR_new <- kNN(heart,variable="MaxHR",dist_var =c("Age","Sex","ChestPainType","FastingBS","RestingECG","ExerciseAngina","ST_Slope","HeartDisease"),k=3)
MaxHR_new <- MaxHR_new$MaxHR
heart$MaxHR <- MaxHR_new
heart$MaxHR[posMaxHR]
colSums(is.na(heart))
colSums(heart == 0)
posRestingBP <- which(heart$RestingBP == 0)
posCholesterol <- which(heart$Cholesterol == 0)
heart$RestingBP[posRestingBP] <- NA
heart$Cholesterol[posCholesterol] <- NA
RestingBP_new <- kNN(heart,variable="RestingBP",dist_var =c("Age","Sex","ChestPainType","FastingBS","RestingECG","ExerciseAngina","ST_Slope","HeartDisease"),k=3)
RestingBP_new <- RestingBP_new$RestingBP
heart$RestingBP <- RestingBP_new
Cholesterol_new <- kNN(heart,variable="Cholesterol",dist_var =c("Age","Sex","ChestPainType","FastingBS","RestingECG","ExerciseAngina","ST_Slope","HeartDisease"),k=3)
Cholesterol_new <- Cholesterol_new$Cholesterol
heart$Cholesterol <- Cholesterol_new
heart$RestingBP[posRestingBP]
heart$Cholesterol[posCholesterol]
colSums(is.na(heart))
heart_num <- heart
heart_num$Sex <- with(heart_num, ifelse(Sex == "M", 0,1))
heart_num$ChestPainType <- with(heart_num, ifelse(ChestPainType == "ASY",0,ifelse(ChestPainType == "ATA",1,ifelse(ChestPainType == "NAP",2,3))))
heart_num$RestingECG <- with(heart_num, ifelse(RestingECG == "LVH",0,ifelse(RestingECG == "Normal",1,2)))
heart_num$ExerciseAngina <- with(heart_num, ifelse(ExerciseAngina == "N", 0,1))
heart_num$ST_Slope <- with(heart_num, ifelse(ST_Slope == "Down", 0,ifelse(ST_Slope == "Flat",1,2)))
pca = prcomp(heart_num, scale = TRUE)
plot(pca, type="l")
summary(pca)
library("factoextra")
fviz_contrib(pca, addlabels = TRUE, choice = "var", axes = 1, top = 20)
library("factoextra")
fviz_pca_var(pca,
col.var = "contrib", # color en funcón de la contribución.
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
biplot(pca, scale = 0, cex = 0.5, col = c("lightblue", "red"))
Age_nor <- (2*(heart$Age-min(heart$Age))/(max(heart$Age)-min(heart$Age)))-1
heart <- cbind(heart,Age_nor)
min(heart$Age_nor)
max(heart$Age_nor)
Age_dist <- cut(heart$Age, breaks = c(0,40,60,80), labels = c("(0-40]","(40,60]","(60,80]"))
heart <- cbind(heart,Age_dist)
id = c(1,4,5,6,8,10)
mean <- as.vector(sapply(heart[,id],mean,na.rm = TRUE))
std <- as.vector(sapply(heart[,id],sd,na.rm = TRUE))
median <- as.vector(sapply(heart[,id],median,na.rm = TRUE))
mean.trim <- as.vector(sapply(heart[,id],mean,na.rm = TRUE,trim = 0.05))
IQR <- as.vector(sapply(heart[,id],IQR,na.rm = TRUE))
mad <- as.vector(sapply(heart[,id],mad,na.rm = TRUE))
library(kableExtra)
kable(data.frame(Variables = names(heart)[id],MEDIA   = mean, MEDIANA   = median, MEDIA_RECORTADA  = mean.trim),
digits = 3, caption = "Estimaciones tendencia central")%>% kable_styling(bootstrap_options = c("striped","hover", "responsive"),position = "left")
kable(data.frame(Variables = names(heart)[id],SD = std, IQR = IQR, MAD = mad),
digits = 3, caption = "Estimaciones de dispersión")%>% kable_styling(bootstrap_options = c("striped","hover", "responsive"),position = "left")
summary(heart)
qqnorm(heart$Age)
qqline(heart$Age)
shapiro.test(heart$Age)
library(nortest)
lillie.test(heart$Age)
qqnorm(heart$RestingBP)
qqline(heart$RestingBP)
qqnorm(heart$Cholesterol)
qqline(heart$Cholesterol)
qqnorm(heart$MaxHR)
qqline(heart$MaxHR)
shapiro.test(heart$MaxHR)
lillie.test(heart$MaxHR)
qqnorm(heart$Oldpeak)
qqline(heart$Oldpeak)
qqnorm(heart$Age_nor)
qqline(heart$Age_nor)
shapiro.test(heart$Age_nor)
lillie.test(heart$Age_nor)
colHom <- heart$Cholesterol[heart$Sex=="M"]
colMuj <- heart$Cholesterol[heart$Sex=="F"]
var.test(colMuj, colHom)
alfa <- 1-0.95
n1 <- length(colMuj)
n2 <- length(colHom)
s1 <- sd(colMuj)
s2 <- sd(colHom)
mean1 <- mean(colMuj)
mean2 <- mean(colHom)
tobs <- (mean1-mean2) / (sqrt(s1^2/n1 + s2^2/n2))
df <- ((s1^2/n1 + s2^2/n2)^2) / ((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
tcritU <- qt(alfa,df,lower.tail = FALSE)
pvalue <-pt( tobs,df, lower.tail=FALSE)
paste("Estadistico de contraste: ",tobs)
paste("Valor crítico: ",tcritU)
paste("Valor p: ",pvalue)
paste("Valor de df: ",df)
t.test( colMuj,colHom , var.equal=FALSE, alternative = "greater")
carHom <- heart$FastingBS[heart$Sex=="M" & heart$HeartDisease=="1"]
carMuj <- heart$FastingBS[heart$Sex=="F" & heart$HeartDisease=="1"]
var.test(carHom,carMuj)
alfa <- 1-0.95
n1 <- length(carHom)
n2 <- length(carMuj)
s1 <- sd(carHom)
s2 <- sd(carMuj)
mean1 <- mean(carHom)
mean2 <- mean(carMuj)
df <- n1+n2-2
S <- sqrt( ( (n1-1)*s1^2 + (n2-1)*s2^2 ) / (n1+n2-2) )
tobs <- (mean1-mean2) / (S * sqrt(1/n1 + 1/n2))
tcritL <- qt( alfa/2, n1+n2-2)
tcritU <- qt( 1-alfa/2, n1+n2-2)
pvalue <-pt( abs(tobs), df=n1+n2-2, lower.tail=FALSE)
paste("Estadistico de contraste: ",tobs)
paste("Valor crítico: ",tcritU)
paste("Valor p: ",pvalue)
paste("Valor de df: ",df)
t.test( carHom,carMuj , var.equal=TRUE, alternative = "greater")
Corelacion <- cor(heart_num,method="pearson")
Corelacion
if (!require('corrplot')) install.packages('corrplot'); library('corrplot')
corrplot(Corelacion, method = "number")
Model_reg_sim <- lm(MaxHR~Age,data=heart)
summary(Model_reg_sim)
Model_reg_mul <- lm(MaxHR~Age+HeartDisease+ST_Slope+FastingBS+Oldpeak+RestingECG+Sex+Cholesterol,data=heart)
summary(Model_reg_mul)
model_logis1 <- glm(formula=HeartDisease~MaxHR,data=heart,family=binomial())
summary(model_logis1)
if (!require('ResourceSelection')) install.packages('ResourceSelection'); library('ResourceSelection')
hoslem.test(heart$HeartDisease,fitted(model_logis1))
model_logis2 <- glm(formula=HeartDisease~ST_Slope+Oldpeak+MaxHR+ChestPainType+RestingBP+Age_nor,data=heart,family=binomial())
summary(model_logis2)
hoslem.test(heart$HeartDisease,fitted(model_logis2))
set.seed(42)
index <- sample(1:nrow(heart),size = floor(0.80*nrow(heart)))
train <- heart[index,]
test <- heart[-index,]
model_logis3 <- glm(formula=HeartDisease~ST_Slope+Oldpeak+MaxHR+ChestPainType+RestingBP+Age_nor,data=train,family=binomial())
summary(model_logis3)
predicion_1 <- ifelse(predict(model_logis3,newdata = test, type="response") >=0.5,1,0)
predicion_1
mat_conf_1<-table(test$HeartDisease,Predicted=predicion_1)
mat_conf_1
if(!require(gmodels)){
install.packages('gmodels', repos='http://cran.us.r-project.org')
library(gmodels)
}
CrossTable(test$HeartDisease,predicion_1,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
print(sprintf("La precisión del modelo es: %.4f %%",100*(158/184)))
set.seed(1)
heart_clasification <- heart[sample(nrow(heart)),]
set.seed(666)
y <- heart_clasification[,12]
X <- heart_clasification[,1:11]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification)))
trainx<-X[indexes,]
trainy<-y[indexes]
testx<-X[-indexes,]
testy<-y[-indexes]
if(!require(ggplot2)){
install.packages('ggplot2', repos='http://cran.us.r-project.org')
library(ggplot2)
}
if(!require(ggpubr)){
install.packages('ggpubr', repos='http://cran.us.r-project.org')
library(ggpubr)
}
if(!require(grid)){
install.packages('grid', repos='http://cran.us.r-project.org')
library(grid)
}
if(!require(gridExtra)){
install.packages('gridExtra', repos='http://cran.us.r-project.org')
library(gridExtra)
}
if(!require(C50)){
install.packages('C50', repos='http://cran.us.r-project.org')
library(C50)
}
library("rpart")
library("rpart.plot")
if(!require(C50)){
install.packages('C50', repos='http://cran.us.r-project.org')
library(C50)
}
trainy = as.factor(trainy)
modelo_clasificacion_C50 <- C50::C5.0(trainx, trainy,rules=TRUE,control = C5.0Control(noGlobalPruning = FALSE) )
summary(modelo_clasificacion_C50)
predicted_model <- predict( modelo_clasificacion_C50, testx, type="class" )
print(sprintf("La precisión del modelo es: %.4f %%",100*sum(predicted_model == testy) / length(predicted_model)))
modelo_clasificacion_rpart <- rpart(formula = trainy ~ ., data = trainx, method = "class" )
summary(modelo_clasificacion_rpart)
rpart.plot(modelo_clasificacion_rpart, type=2,extra = 2, under = TRUE, faclen=5,cex=.85)
rpart.plot(modelo_clasificacion_rpart, type=2,extra = 8, under = TRUE, faclen=5,cex=.85)
predicted_model <- predict( modelo_clasificacion_rpart, testx, type="class" )
print(sprintf("La precisión del modelo4 es: %.4f %%",100*sum(predicted_model == testy) / length(predicted_model)))
mat_conf_2<-table(testy,Predicted=predicted_model)
mat_conf_2
CrossTable(testy, predicted_model,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
print(sprintf("La precisión del modelo4 es: %.4f %%",100*sum(predicted_model == testy) / length(predicted_model)))
heart_2 <-heart
head(heart_2)
heart_2["edad_discretizada"] <- cut(heart$Age, breaks = c(0,40,55,65,100), labels = c("0-39(Riesgo muy bajo)", "40-54(Riesgo bajo)", "55-64(Riesgo medio)", "65-100(Riesgo alto)"))
heart_2["restingBP_discretizado"] <- cut(heart$RestingBP , breaks = c(0,120,130,140,180,500), labels = c("0-119(Normal)", "120-129(Elevada)", "130-139(Alta nivel 1)", "140-179(Alta nivel 2)", "180-x(Crisis de hipertesión)"))
heart_2["chol_discretizado"] <- cut(heart$Cholesterol, breaks = c(-1,200,240,1000), labels = c("0-199(Riesgo bajo)", "200-239(Riesgo medio)", "240-x(Riesgo alto)"))
heart_2$FastingBS <- as.factor(heart_2$FastingBS)
summary(heart[,"FastingBS"])
summary(heart[,"Oldpeak"])
heart_2["oldpeak_discretizado"] <- cut(heart$Oldpeak, breaks = c(-3,0,2,4,6,8,10), labels = c(0, 1, 2, 3,4,7))
heart_2$HeartDisease <- as.factor(heart_2$HeartDisease)
fviz_contrib(pca, addlabels = TRUE, choice = "var", axes = 1, top = 20)
library(dplyr)
heart_2 = heart_2 %>% select(ST_Slope, ExerciseAngina , MaxHR, Oldpeak, Age, ChestPainType, Sex, FastingBS, RestingBP, RestingECG, Cholesterol,  oldpeak_discretizado, edad_discretizada, restingBP_discretizado, chol_discretizado, HeartDisease)
head(heart_2)
set.seed(1)
heart_clasification_2 <- heart_2[sample(nrow(heart_2)),]
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:11]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
modelo_trials_3 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
CrossTable(testy2, predicted_model_2,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:12]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
modelo_trials_3 <- C50::C5.0(trainx2, trainy2, trials = 100, rules = TRUE)
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:13]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning =TRUE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:11]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:10]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:8]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
set.seed(1)
heart_clasification_2 <- heart_2[sample(nrow(heart_2)),]
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(1)
heart_clasification_2 <- heart_2[sample(nrow(heart_2)),]
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
set.seed(1)
heart_clasification_2 <- heart_2[sample(nrow(heart_2)),]
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:14]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
CrossTable(testy2, predicted_model_2,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
set.seed(1)
heart_clasification_2 <- heart_2[sample(nrow(heart_2)),]
set.seed(666)
y <- heart_clasification_2[,16]
X <- heart_clasification_2[,1:15]
split_prop <- 3
indexes = sample(1:nrow( heart_clasification_2), size=floor(((split_prop-1)/split_prop)*nrow(heart_clasification_2)))
trainx2<-X[indexes,]
trainy2<-y[indexes]
testx2<-X[-indexes,]
testy2<-y[-indexes]
modelo_trials_2 <- C50::C5.0(trainx2, trainy2,rules=TRUE, trials = 100,control = C5.0Control(noGlobalPruning = FALSE) )
predicted_model_2 <- predict( modelo_trials_2, testx2, type="class" )
mat_conf_2<-table(testy2,Predicted=predicted_model_2)
porcentaje_correct_2<-100 * sum(diag(mat_conf_2)) / sum(mat_conf_2)
print(sprintf("El %% de registros correctamente clasificados es: %.4f %%",porcentaje_correct_2))
CrossTable(testy2, predicted_model_2,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
CrossTable(testy2, predicted_model_2,prop.chisq  = FALSE, prop.c = FALSE, prop.r =FALSE,dnn = c('Reality', 'Prediction'))
